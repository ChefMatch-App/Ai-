{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bae7920f",
   "metadata": {},
   "outputs": [
    {
     "ename": "MemoryError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 11\u001b[0m\n\u001b[0;32m      8\u001b[0m app \u001b[38;5;241m=\u001b[39m Flask(\u001b[38;5;18m__name__\u001b[39m)\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m gzip\u001b[38;5;241m.\u001b[39mopen(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhybrid_model.pkl.gz\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrb\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[1;32m---> 11\u001b[0m     hybrid_model \u001b[38;5;241m=\u001b[39m \u001b[43mpickle\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     13\u001b[0m \u001b[38;5;66;03m# Extract components\u001b[39;00m\n\u001b[0;32m     14\u001b[0m model \u001b[38;5;241m=\u001b[39m hybrid_model[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msvd_model\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\gzip.py:300\u001b[0m, in \u001b[0;36mGzipFile.read\u001b[1;34m(self, size)\u001b[0m\n\u001b[0;32m    298\u001b[0m     \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01merrno\u001b[39;00m\n\u001b[0;32m    299\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m(errno\u001b[38;5;241m.\u001b[39mEBADF, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mread() on write-only GzipFile object\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 300\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_buffer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43msize\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mMemoryError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, jsonify\n",
    "import pickle\n",
    "import scipy.sparse as sp\n",
    "import pandas as pd\n",
    "import gzip\n",
    "\n",
    "# Initialize Flask app\n",
    "app = Flask(__name__)\n",
    "\n",
    "with gzip.open('hybrid_model.pkl.gz', 'rb') as file:\n",
    "    hybrid_model = pickle.load(file)\n",
    "\n",
    "# Extract components\n",
    "model = hybrid_model['svd_model']\n",
    "cosine_sim = hybrid_model['cosine_sim']\n",
    "recipe2idx = hybrid_model['recipe2idx']\n",
    "\n",
    "# Load the recipe dataset (adjust the path to your dataset)\n",
    "df = pd.read_csv('merged_recipes_yelp.csv')\n",
    "\n",
    "meal_ids = df['contributor_id'].tolist()\n",
    "\n",
    "# Function to get SVD-based recommendations\n",
    "def get_svd_recommendations(user_id, top_n=5):\n",
    "    predictions = [svd_model.predict(user_id, meal_id) for meal_id in meal_ids]\n",
    "    predicted_scores = [pred.est for pred in predictions]\n",
    "    \n",
    "    \n",
    "    meal_id_score_map = dict(zip(meal_ids, predicted_scores))\n",
    "    \n",
    "    #\n",
    "    sorted_meal_ids = sorted(meal_id_score_map.keys(), key=lambda x: meal_id_score_map[x], reverse=True)\n",
    "    \n",
    "    # Get top N meal_ids\n",
    "    top_meal_ids = sorted_meal_ids[:top_n]\n",
    "    return top_meal_ids\n",
    "\n",
    "# Function to get content-based recommendations\n",
    "def get_content_based_recommendations(recipe_id, top_n=5):\n",
    "    idx = recipe2idx.get(recipe_id)\n",
    "    if idx is None:\n",
    "        return []\n",
    "    similarity_scores = list(enumerate(cosine_sim[idx]))\n",
    "    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)\n",
    "    similar_recipes = [meal_ids[i[0]] for i in similarity_scores[1:top_n+1]]\n",
    "    return similar_recipes\n",
    "\n",
    "# Hybrid recommendation function\n",
    "def hybrid_recommendation(user_id, meal_id, alpha=0.7, top_n=5):\n",
    "    svd_recipes = get_svd_recommendations(user_id, top_n * 3)\n",
    "    content_based_recipes = get_content_based_recommendations(meal_id, top_n * 2)\n",
    "    \n",
    "    # Calculate combined scores\n",
    "    svd_scores = {rec: svd_model.predict(user_id, rec).est for rec in svd_recipes}\n",
    "    content_scores = {rec: cosine_sim[recipe2idx[meal_id], recipe2idx[rec]] for rec in content_based_recipes}\n",
    "\n",
    "    combined_scores = {}\n",
    "    for meal in set(svd_scores.keys()).union(content_scores.keys()):\n",
    "        svd_score = svd_scores.get(meal, 0)\n",
    "        content_score = content_scores.get(meal, 0)\n",
    "        combined_score = alpha * svd_score + (1 - alpha) * content_score\n",
    "        combined_scores[meal] = combined_score\n",
    "\n",
    "    # Sort recipes based on combined scores\n",
    "    sorted_recipes = sorted(combined_scores.items(), key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Get top N meal IDs\n",
    "    top_meals = [meal[0] for meal in sorted_recipes[:top_n]]\n",
    "    \n",
    "    # Fetch details for top meals\n",
    "    recommendations = df[df['meal_id'].isin(top_meals)][['meal_id', 'recipe_name', 'restaurant']]\n",
    "    return recommendations\n",
    "\n",
    "### API Routes ###\n",
    "\n",
    "@app.route('/recommend/hybrid', methods=['GET'])\n",
    "def recommend_hybrid():\n",
    "    user_id = int(request.args.get('user_id'))\n",
    "    meal_id = int(request.args.get('meal_id'))\n",
    "    top_n = int(request.args.get('top_n', 5))\n",
    "    \n",
    "    recommendations = hybrid_recommendation(user_id=user_id, meal_id=meal_id, top_n=top_n)\n",
    "    return jsonify(recommendations.to_dict(orient='records'))\n",
    "\n",
    "@app.route('/recommend/svd', methods=['GET'])\n",
    "def recommend_svd():\n",
    "    user_id = int(request.args.get('user_id'))\n",
    "    top_n = int(request.args.get('top_n', 5))\n",
    "    \n",
    "    recommendations = get_svd_recommendations(user_id=user_id, top_n=top_n)\n",
    "    result = df[df['meal_id'].isin(recommendations)][['meal_id', 'recipe_name', 'restaurant']]\n",
    "    return jsonify(result.to_dict(orient='records'))\n",
    "\n",
    "@app.route('/recommend/content', methods=['GET'])\n",
    "def recommend_content():\n",
    "    meal_id = int(request.args.get('meal_id'))\n",
    "    top_n = int(request.args.get('top_n', 5))\n",
    "    \n",
    "    recommendations = get_content_based_recommendations(recipe_id=meal_id, top_n=top_n)\n",
    "    result = df[df['meal_id'].isin(recommendations)][['meal_id', 'recipe_name', 'restaurant']]\n",
    "    return jsonify(result.to_dict(orient='records'))\n",
    "\n",
    "# Run the Flask application\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc17eeb8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
